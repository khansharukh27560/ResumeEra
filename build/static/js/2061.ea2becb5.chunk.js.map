{"version":3,"file":"static/js/2061.ea2becb5.chunk.js","mappings":"+PAUA,MAAMA,EAAWC,IAAiB,IAAhB,OAAEC,GAAQD,EACxB,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,OAC1CC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,MAE/CG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAwCjB,OACIC,EAAAA,EAAAA,KAAA,WAASC,UAAU,qBAAqB,aAAW,4BAA2BC,UAC1EF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAvCXC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,cAAe,KACfC,QAAS,cACTC,cAAc,EACdC,WAAW,EACXC,SAAU,WACVC,WAAY,CACR,CACIC,WAAY,KACZC,SAAU,CAAEV,aAAc,IAE9B,CACIS,WAAY,IACZC,SAAU,CAAEV,aAAc,IAE9B,CACIS,WAAY,IACZC,SAAU,CAAEV,aAAc,IAE9B,CACIS,WAAY,IACZC,SAAU,CAAEV,aAAc,KAaVL,SACT,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQ4B,KAAKC,IACVnB,EAAAA,EAAAA,KAAA,OAAoBC,UAAU,iBAAgBC,UAC1CkB,EAAAA,EAAAA,MAAA,OACInB,UAAU,yBACVoB,aAAcA,IAAM7B,EAAgB2B,EAAMG,IAC1CC,aAAcA,IAAM/B,EAAgB,MAAMU,SAAA,CAEzCR,IAAmByB,EAAMG,KACtBtB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAC,gBAIlCF,EAAAA,EAAAA,KAACwB,EAAAA,cAAa,CACVC,IAAKN,EAAMM,IACXC,IAAKP,EAAMO,KAAO,iBAClBC,OAAO,OACP1B,UAAU,iBACV2B,WAAYA,IAAMjC,EAAkBwB,EAAMG,IAC1CO,UAAWA,IAAMlC,EAAkB,MACnCmC,eAAgBX,EAAMO,MAIzBnC,IAAiB4B,EAAMG,KACpBtB,EAAAA,EAAAA,KAAA,UACI+B,QAAUC,GAlCtBC,EAACD,EAAGE,KACpBF,EAAEG,iBACFvC,EAAS,aAAasC,KACtBpC,GAASsC,EAAAA,EAAAA,IAAaF,GAAS,EA+BaD,CAAYD,EAAGb,EAAMG,IACrCrB,UAAU,kBACV,aAAW,eAAcC,SAC5B,kBA3BHiB,EAAMG,SAmClB,EAIlB,EAAee,EAAAA,KAAWjD,E","sources":["component/Crousel.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Slider from 'react-slick';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { useNavigate } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { templatePage } from '../Redux/action';\nimport '../css/crousel.css';\n\nconst Carousel = ({ images }) => {\n    const [hoveredImage, setHoveredImage] = useState(null);\n    const [loadingImageId, setLoadingImageId] = useState(null);\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const settings = {\n        dots: false,\n        infinite: true,\n        speed: 400,\n        slidesToShow: 5,\n        slidesToScroll: 1,\n        autoplay: true,\n        autoplaySpeed: 2500,\n        cssEase: 'ease-in-out',\n        swipeToSlide: true,\n        draggable: true,\n        lazyLoad: 'ondemand',\n        responsive: [\n            {\n                breakpoint: 1024,\n                settings: { slidesToShow: 5 }\n            },\n            {\n                breakpoint: 768,\n                settings: { slidesToShow: 4 }\n            },\n            {\n                breakpoint: 480,\n                settings: { slidesToShow: 2 }\n            },\n            {\n                breakpoint: 360,\n                settings: { slidesToShow: 1 }\n            }\n        ]\n    };\n\n    const handleClick = (e, imageId) => {\n        e.preventDefault();\n        navigate(`/mainpage/${imageId}`);\n        dispatch(templatePage(imageId));\n    };\n\n    return (\n        <section className=\"carousel-container\" aria-label=\"Resume Templates Carousel\">\n            <Slider {...settings}>\n                {images?.map((image) => (\n                    <div key={image.id} className=\"carousel-slide\">\n                        <div\n                            className=\"carousel-image-wrapper\"\n                            onMouseEnter={() => setHoveredImage(image.id)}\n                            onMouseLeave={() => setHoveredImage(null)}\n                        >\n                            {loadingImageId === image.id && (\n                                <div className=\"image-loader\">Loading...</div>\n                            )}\n\n                            {/* Lazy Loaded Image */}\n                            <LazyLoadImage\n                                src={image.src}\n                                alt={image.alt || \"Resume Preview\"}\n                                effect=\"blur\"\n                                className=\"carousel-image\"\n                                beforeLoad={() => setLoadingImageId(image.id)}\n                                afterLoad={() => setLoadingImageId(null)}\n                                placeholderSrc={image.alt}\n                            />\n\n                            {/* Button on Hover */}\n                            {hoveredImage === image.id && (\n                                <button\n                                    onClick={(e) => handleClick(e, image.id)}\n                                    className=\"carousel-button\"\n                                    aria-label=\"Go to Resume\"\n                                >\n                                    Go Resume\n                                </button>\n                            )}\n                        </div>\n                    </div>\n                ))}\n            </Slider>\n        </section>\n    );\n};\n\nexport default React.memo(Carousel);\n"],"names":["Carousel","_ref","images","hoveredImage","setHoveredImage","useState","loadingImageId","setLoadingImageId","navigate","useNavigate","dispatch","useDispatch","_jsx","className","children","Slider","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","cssEase","swipeToSlide","draggable","lazyLoad","responsive","breakpoint","settings","map","image","_jsxs","onMouseEnter","id","onMouseLeave","LazyLoadImage","src","alt","effect","beforeLoad","afterLoad","placeholderSrc","onClick","e","handleClick","imageId","preventDefault","templatePage","React"],"sourceRoot":""}